{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\my-app\\\\src\\\\components\\\\comicsList\\\\ComicsList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './comicsList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ComicsList = props => {\n  _s();\n\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [comicsEnded, setComicsEnded] = useState(false);\n  const {\n    loading,\n    error,\n    getAllComics\n  } = useMarvelService();\n  useEffect(() => {\n    onRequest(offset, true); // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset).then(onComicsListLoaded);\n  };\n\n  const onComicsListLoaded = newComicsList => {\n    let ended = false;\n\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n\n    setComicsList(comicsList => [...comicsList, ...newComicsList]);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 8);\n    setComicsEnded(comicsEnded => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n      const noImgUrl = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\n\n      if (item.thumbnail === noImgUrl) {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"comics__item\",\n        ref: el => itemRefs.current[i] = el,\n        tabIndex: 0,\n        onClick: () => {\n          props.onComicsSelected(item.id);\n          focusOnItem(i);\n        },\n        onKeyPress: e => {\n          if (e.key === ' ' || e.key === \"Enter\") {\n            props.onComicsSelected(item.id);\n            focusOnItem(i);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.thumbnail,\n          alt: item.title,\n          className: \"comics__item-img\",\n          style: imgStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comics__item-name\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comics__item-price\",\n          children: item.prices\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"comics__grid\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n  const items = renderItems(comicsList);\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 34\n  }, this) : null;\n  const spinner = loading && !newItemLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 50\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comics__list\",\n    children: [errorMessage, spinner, items, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      disabled: newItemLoading,\n      style: {\n        'display': comicsEnded ? 'none' : 'block'\n      },\n      onClick: () => onRequest(offset),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ComicsList, \"zgLnwYVu0KB2XmgCmTvPzux4Lbs=\", false, function () {\n  return [useMarvelService];\n});\n\n_c = ComicsList;\nexport default ComicsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComicsList\");","map":{"version":3,"sources":["C:/Users/PC/my-app/src/components/comicsList/ComicsList.js"],"names":["useState","useEffect","useRef","Spinner","ErrorMessage","useMarvelService","ComicsList","props","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","itemRefs","focusOnItem","id","current","forEach","item","classList","remove","add","focus","renderItems","arr","items","map","i","imgStyle","noImgUrl","thumbnail","el","onComicsSelected","e","key","title","prices","errorMessage","spinner"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst ComicsList = (props) => {\n    const [comicsList, setComicsList] = useState([])\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(210)\n    const [comicsEnded, setComicsEnded] = useState(false)\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true)\n    // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false\n        if (newComicsList.length < 8) {\n            ended = true\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 8)\n        setComicsEnded(comicsEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            const noImgUrl = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n            if (item.thumbnail === noImgUrl) {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"comics__item\"\n                    ref={el => itemRefs.current[i] = el}\n                    tabIndex={0}\n                    key={item.id}\n                    onClick={()=> {\n                        props.onComicsSelected(item.id)\n                        focusOnItem(i)\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onComicsSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    \n                        {/* <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div> */}\n\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" style={imgStyle}/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.prices}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n   return (\n    <div className=\"comics__list\">\n        {errorMessage}\n        {spinner}\n        {items}\n           \n        <button \n            className=\"button button__main button__long\" \n            disabled={newItemLoading}\n            style={{'display' : comicsEnded ? 'none' : 'block'}}\n            onClick={() => onRequest(offset)}\n        >\n            <div className=\"inner\">load more</div>\n        </button>\n    </div>\n)\n}\n\nexport default ComicsList;"]},"metadata":{},"sourceType":"module"}